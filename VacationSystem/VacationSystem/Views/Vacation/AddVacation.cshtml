@using Microsoft.AspNetCore.Http;
@using VacationSystem.ViewModels;
@using VacationSystem.HtmlHelpers;

@{
    ViewData["Title"] = "Выбор отпуска";

    string error = null;
    if (TempData["Error"] != null)
        error = TempData["Error"].ToString();

    int availableDays = (int)Context.Session.GetInt32("available_days");
}

<div class="container">
    <div class="row">
        <div class="col-7">
            @Html.CheckError(error)
            <div id="message-block"></div>
            <h5 id="remained-days">Осталось дней: @availableDays</h5>
            <form method="post">
                <div id="vacation-periods">
                    <div class="vacation-period">
                        <h3>Начало периода:</h3>
                        <input type="date" name="startDates" class="period-date" />
                        <h3>Конец периода:</h3>
                        <input type="date" name="endDates" class="period-date" />
                    </div>
                    <button type="button" class="btn btn-secondary add-period">Добавить период</button>
                    <button type="button" class="btn btn-secondary remove-period">Удалить период</button>
                </div>
                <input type="submit" class="btn btn-primary" id="submit-button" disabled="disabled" />
            </form>
        </div>
    </div>
</div>

@section scripts{
<script type="text/javascript">
    // добавление нового периода
    $('#vacation-periods').on('click', '.add-period', function() {
        // получить уже существующий один период для копирования
        var periodTemplate = $('.vacation-period:last');
        // создать новый период
        $(periodTemplate).clone().appendTo('#vacation-periods').find("input[type='date']").val("");
        // переместить кнопки в конец
        $(this).appendTo('#vacation-periods');
        $('.remove-period:last').appendTo('#vacation-periods');
    });

    // удаление одного периода
    $('#vacation-periods').on('click', '.remove-period', function() {
        // получить все периоды
        var periods = document.getElementsByClassName('vacation-period');
        // если есть только один период, то ничего не делать
        if (periods.length == 1)
            return false;
        // индекс последнего периода
        var lastIndex = periods.length - 1;
        // удалить последний период
        $('.vacation-period:eq('+lastIndex+')').remove();
        // пересчитать дни
        refreshRemainedDays();
    });

    // попытка сохранения выбранных периодов
    $(document).on('click', '#submit-button', function() {
        // получить значения введенных начальных и конечных дат
        var serialised = $('form').serializeArray();

        if (!checkDates(serialised))
            return null;

        var remainedDays = getRemainedDaysNumber(serialised);
        console.log(remainedDays);

        if (remainedDays < 0)
            return null;
        
        if (remainedDays > 0)
            return null;

        // если все даты корректны, обновить количество доступных дней
        $.ajax({
            type: "POST",
            url: '@Url.Action("AddVacation")',
            success: function () { }
        });
    });

    // показать сообщение о некорректности выбора дат
    function showMessage(message) {
        $('#message-block').addClass('alert').addClass('alert-info');
        $('#message-block').text(message);
    }

    // скрыть сообщение
    function hideMessage() {
        $('#message-block').text('');
        $('#message-block').removeClass('alert').removeClass('alert-info');
    }

    // заблокировать кнопку сохранения отпуска
    function blockButton() {
        $('#submit-button').attr("disabled", true);
    }

    // разблокировать кнопку сохранения отпуска
    function unlockButton() {
        $('#submit-button').attr("disabled", false);
    }

    // функция проверки пустых значений дат
    function checkEmptyValues(periods) {
        var isValid = true;

        for (let i = 0; i < periods.length - 1; i++)
        {
            if (periods[i].value == '')
            {
                isValid = false;
                break;
            }
        }

        return isValid;
    }

    // функция проверки корректности порядка конечных дат периодов
    function checkPeriodDates(periods) {
        var isValid = true;

        for (let i = 0; i < periods.length - 2; i = i + 2)
        {
            if (new Date(periods[i].value) > new Date(periods[i + 1].value))
            {
                isValid = false;
                break;
            }
        }

        return isValid;
    }

    // функция проверки, что выбранные периоды не включают в себя друг друга
    function checkInclusions(periods) {
        var isValid = true;

        // счетчик первой пары для сравнения
        for (let i = 0; i < periods.length - 2; i = i + 2)
            // счетчик второй пары для сравнения
            for (let j = i + 2; j < periods.length - 1; j = j + 2) {
                // если первый включен во второй
                if ((new Date(periods[i].value) > new Date(periods[j].value))
                && (new Date(periods[i + 1].value) < new Date(periods[j + 1].value)))
                    {
                        isValid = false;
                        break;
                    }
                // второй период включен в первый
                if ((new Date(periods[i].value) < new Date(periods[j].value))
                && (new Date(periods[i + 1].value) > new Date(periods[j + 1].value)))
                    {
                        isValid = false;
                        break;
                    }
            }

        return isValid;
    }

    // функция проверки пересечений периодов
    function checkIntersections(periods) {
        var isValid = true;

        // счетчик первой пары для сравнения
        for (let i = 0; i < periods.length - 2; i = i + 2)
            // счетчик второй пары для сравнения
            for (let j = i + 2; j < periods.length - 1; j = j + 2) {
                // находится ли какая-то дата первого периода между датами второго
                if (
                ((new Date(periods[i].value) > new Date(periods[j].value))
                &&
                (new Date(periods[i].value) < new Date(periods[j + 1].value)))
                ||
                ((new Date(periods[i + 1].value) > new Date(periods[j].value))
                &&
                (new Date(periods[i + 1].value) < new Date(periods[j + 1].value)))
                ||
                ((new Date(periods[j].value) > new Date(periods[i].value))
                &&
                (new Date(periods[j].value) < new Date(periods[i + 1].value)))
                ||
                ((new Date(periods[j + 1].value) > new Date(periods[i].value))
                &&
                (new Date(periods[j + 1].value) < new Date(periods[i + 1].value)))
                ) {
                    // пересечения с одной стороны
                    if ((new Date(periods[i].value) > new Date(periods[j].value))
                    && (new Date(periods[i + 1].value) > new Date(periods[j + 1].value)))
                        {
                            isValid = false;
                            break;
                        }
                    // пересечения с другой стороны
                    if ((new Date(periods[i].value) < new Date(periods[j].value))
                    && (new Date(periods[i + 1].value) < new Date(periods[j + 1].value)))
                        {
                            isValid = false;
                            break;
                        }
                }
            }

        return isValid;
    }

    // функция, включающая в себя все проверки
    function checkDates(periods) {
        // проверить, что все даты заполнены
        if (!checkEmptyValues(periods)) {
            showMessage('Не указана дата начала или конца периода');
            return false;
        }
        else
            hideMessage();
        
        // проверить, что все периоды корректны
        if (!checkPeriodDates(periods)) {
            showMessage('Неправильный порядок дат начала и конца периода');
            return false;
        }
        else
            hideMessage();
        
        // проверить, не включены ли периоды внутрь друг друга
        if (!checkInclusions(periods)) {
            showMessage('Выбранные периоды не могут быть включены внутрь друг друга')
            return false;
        }
        else
            hideMessage();

        // проверить, не пересекаются ли периоды
        if (!checkIntersections(periods)) {
            showMessage('Выбранные периоды не могут пересекаться')
            return false;
        }
        else
            hideMessage();

        return true;
    }

    // получение оставшегося количества дней
    function getRemainedDaysNumber(periods) {
        // получить значения введенных начальных и конечных дат
        var serialised = $('form').serializeArray();

        var number;

        // получить оставшееся количество доступных дней
        $.ajax({
            type: "POST",
            url: '@Url.Action("CalculateDays")/',
            data: {"collection":periods},
            success: function (result) { 
                console.log(result);
                number = result;
            }
        });

        return number;
    }

    // пересчет оставшегося количества отпускных дней
    function refreshRemainedDays() {
        // получить значения введенных начальных и конечных дат
        var serialised = $('form').serializeArray();
        console.log("serialised data", serialised);

        if (checkDates(serialised)) {
            // если все даты корректны, обновить количество доступных дней
            $.ajax({
                type: "POST",
                url: '@Url.Action("CalculateDays")/',
                data: {"collection":serialised},
                success: function (result) { 
                    $('#remained-days').text('Осталось дней: ' + result);
                }
            });

            unlockButton();
        }
        else
        {
            blockButton();
        }
    }

    // пересчитывать даты при каждом изменении дат
    $(document).on('change', '.period-date', function() {
        refreshRemainedDays();
    });
</script>
}